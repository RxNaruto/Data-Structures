Infix expression-

<operands><operator><operands>

Precedence-                       Associativit- 
1. ()                             
2. ^                              right->left
3. *,/                            left->right
4. +,-                            left->right

Prefix Notation-

<operator><operands><operands>
 
 1.   4*2+3  ->      =*423
 2.   5-6/7  ->      -5/67
 

 Postfix-

 <operand><operand><operator>

 1.   4*2+3  ->      42*3+
 2.   5-6/7  ->      567/-

 In case of prefix we start from the last and in case of postfix we start form last
 In case of postfix we start from the first

 Infix to Postfix -

 If operand 
      print
 if '(' 
    push to stack
 if ')'
    pop from stack and print until '(' is found
 if operator
    pop from the stack and print until operator with less precedence in found.

Infix to Prefix-
first reverse the string 
 If operand
     print
 If '(' 
    push to stack
 if ')'
  pop form the stack and print until '(' is found
 if operator 
  pop from the stack and print until an operator with less precedence is found

  again reverse the solution string